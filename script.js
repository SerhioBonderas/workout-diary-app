"use strict";

const form = document.querySelector(".form");
const containerWorkouts = document.querySelector(".workouts");
const inputType = document.querySelector(".form__input--type");
const inputDistance = document.querySelector(".form__input--distance");
const inputDuration = document.querySelector(".form__input--duration");
const inputCadence = document.querySelector(".form__input--cadence");
const inputElevation = document.querySelector(".form__input--elevation");
const resetBtn = document.querySelector(".reset-btn");

// –ö–ª–∞—Å—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
class Workout {
  date = new Date();
  id = `id-${(Date.now() + "").slice(-7)}`;
  constructor(coords, distance, duration) {
    this.coords = coords;
    this.distance = distance;
    this.duration = duration;
  }
  _setDiscription() {
    // prettier-ignore
    const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December",];
    this.discription = `${this.name[0].toUpperCase()}${this.name.slice(1)} ${months[this.date.getMonth()]} ${this.date.getDate()}`
  }
}

// –ë–µ–≥–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
class Running extends Workout {
  name = '–ë–µ–≥'
  type = 'running';
  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence;
    this.calcPace();
    this._setDiscription();
  }
  calcPace() {
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}

// –í–µ–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
class Cycling extends Workout {
  name = "–í–µ–ª–æ";
  type = "cycling";
  constructor(coords, distance, duration, elevation) {
    super(coords, distance, duration);
    this.elevation = elevation;
    this.calcSpeed();
    this._setDiscription();
  }
  calcSpeed() {
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class App {
  _workouts = [];
  _map;
  _mapEvent;
  constructor() {
    // –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    this._getPosition();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    form.addEventListener("submit", this._newWorkout.bind(this));

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    inputType.addEventListener("change", this._toggleField);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –∫ –º–∞—Ä–∫–µ—Ä—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    containerWorkouts.addEventListener("click", this._moveToPopup.bind(this));

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ LS
    this._getLoclaStorage();

    // –°–±—Ä–æ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    resetBtn.addEventListener('click', this.reset)
  }

  // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ß–µ—Ä–µ–∑ API –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–ª—É—á–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
  _getPosition() {
    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        // –ï—Å–ª–∏ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
        function () {
          alert("–í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏!");
        }
      );
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã
  _loadMap(position) {
    const { latitude, longitude } = position.coords;
    const coords = [latitude, longitude];

    this._map = L.map("map").setView(coords, 13);

    L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
      atribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this._map);

    this._map.on("click", this._showForm.bind(this));

    this._workouts.forEach((work) => {
      this._renderMarker(work);
    });
  }

  // –ü–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞—Ä—Ç—É
  _showForm(mapE) {
    this._mapEvent = mapE;
    form.classList.remove("hidden");
    inputDistance.focus();
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–µ–º–ø/–≤—ã—Å–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  _toggleField() {
    inputCadence.closest(".form__row").classList.toggle("form__row--hidden");
    inputElevation.closest(".form__row").classList.toggle("form__row--hidden");
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ, –æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  _newWorkout(e) {
    e.preventDefault();

    // –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    const { lat, lng } = this._mapEvent.latlng;
    let workout;

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
    const validInput = (...inputs) =>
      inputs.every((inp) => Number.isFinite(inp));

    const allPositive = (...inputs) => inputs.every((inp) => inp > 0);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
    if (type === "running") {
      const cadence = +inputCadence.value;
      if (
        !validInput(distance, duration, cadence) ||
        !allPositive(distance, duration, cadence)
      ) {
        alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!");
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–æ–±–µ–∂–∫–∏
      workout = new Running([lat, lng], distance, duration, cadence);
    }

    if (type === "cycling") {
      const elevation = +inputElevation.value;
      if (
        !validInput(distance, duration, elevation) ||
        !allPositive(distance, duration)
      ) {
        return alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!");
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–µ–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      workout = new Cycling([lat, lng], distance, duration, elevation);
    }

    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ workout
    this._workouts.push(workout);

    // –ó–∞–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∞ –º–∞—Ä–∫–µ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
    this._renderMarker(workout);

    // –ó–∞–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∞ —Ç–µ—Ä–Ω–∏—Ä–æ–≤–æ–∫
    this._renderWorkout(workout);

    // –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ —Å–ø—Ä—è—Ç–∞—Ç—å —Ñ–æ—Ä–º—É
    this._hideForm(this);

    // –ó–∞–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ LocalStorage
    this._setLocalStorage();
  }

  // –†–µ–Ω–¥–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ —Ç–µ—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  _renderMarker(workout) {
    L.marker(workout.coords)
      .addTo(this._map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: "mark-popup",
        })
      )
      .setPopupContent(
        `${
          workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"
        }${workout.discription}`
      )
      .openPopup();
  }

  // –†–µ–Ω–¥–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  _renderWorkout(workout) {
    let html = `<li class="workout workout--${workout.type}" data-id=${
      workout.id
    }>
      <h2 class="workout__title">${workout.discription}</h2>
      <div class="workout__details">
        <span class="workout__icon">${
          workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"
        }</span>
        <span class="workout__value">${workout.distance}</span>
        <span class="workout__unit">–∫–º</span>
      </div>
      <div class="workout__details">
        <span class="workout__icon">‚è±</span>
        <span class="workout__value">${workout.duration}</span>
        <span class="workout__unit">–º–∏–Ω</span>
      </div>`;

    // –µ—Å–ª–∏ –±–µ–≥–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    if (workout.type === "running") {
      html += `<div class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">${workout.pace.toFixed(1)}</span>
            <span class="workout__unit">–º–∏–Ω/–∫–º</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">ü¶∂üèº</span>
            <span class="workout__value">${workout.cadence}</span>
            <span class="workout__unit">—à–∞–≥</span>
          </div>
        </li>`;
    }

    // –µ—Å–ª–∏ –≤–µ–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    if (workout.type === "cycling") {
      html += `<div class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">${workout.speed.toFixed(1)}</span>
            <span class="workout__unit">–∫–º/—á–∞—Å</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚õ∞</span>
            <span class="workout__value">${workout.elevation}</span>
            <span class="workout__unit">–º</span>
          </div>
        </li>`;
    }
    form.insertAdjacentHTML("afterend", html);
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ 
  _hideForm() {
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        "";
    form.classList.add("hidden");
  }

  // –ü–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ –∫ –º–∞—Ä–∫–µ—Ä—É
  _moveToPopup(e) {
    const workoutEL = e.target.closest(".workout");
    console.log(workoutEL);
    if(!workoutEL) return

    const workout = this._workouts.find((work) => work.id === workoutEL.dataset.id);
    console.log(workout);
    this._map.setView(workout.coords, 13, {animate: true, pan: {duration: 1}})
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ LocalStorage
  _setLocalStorage() {
    localStorage.setItem('workouts', JSON.stringify(this._workouts))
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ LS
  _getLoclaStorage() {
    const data = JSON.parse(localStorage.getItem('workouts'));
    
    if(!data) return;

    this._workouts = data;
    this._workouts.forEach((work) => {
          this._renderWorkout(work);
        }
      )
  }
 
  // –°–±—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  reset() {
    localStorage.removeItem('workouts');
    location.reload();
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new App();
